<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta name="author" content="haawke" />
        <title>fft</title>
        <link rel="stylesheet" href="./css/style.css" />
        <style>
            body {
                overflow: hidden;
                margin: 0px;
            }
        </style>
        <!-- Import maps polyfill -->
        <!-- Remove this when import maps will be widely supported -->
        <script async src="./js/es-module-shims.js"></script>

        <script type="importmap">
            {
                "imports": {
                    "three": "./build/three.module.js"
                }
            }
        </script>
    </head>

    <body>
        <a href="/view_source/fft.html" id="vwSrcLink" target="_blank">&lt;&gt;</a>
        <script type="module">
            import * as THREE from 'three'
            import { OrbitControls } from './jsm/OrbitControls.js'
            import Stats from './jsm/stats.module.js'

            let t = 0;

            const day = new THREE.Color(0xB8F4FF);
            const duskdawn = new THREE.Color(0x3d1802);

            init();
            animate();

            function init() {
                const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000)
                camera.position.x = 7
                camera.position.y = 0.75
                camera.position.z = 10;
                let scene = new THREE.Scene();
                scene.background = new THREE.Color();

                const light = new THREE.AmbientLight();
                scene.add(light);

                const canvas = document.createElement('canvas');
                canvas.width = 256;
                canvas.height = 512;

                let alpha;
                let desynchronized;
                let colorSpace;
                let willReadFrequently;

                let ImageSmoothingQuality;

                let globalAlpha;
                let globalCompositeOperation;

                let imageSmoothingEnabled;
                let imageSmoothingQuality;

                const ctx = canvas.getContext('2d');
                alpha = 'true';
                desynchronized = 'true';
                colorSpace = 'srgb';
                willReadFrequently = 'true';
                ImageSmoothingQuality = 'high';
                globalAlpha = '.50';
                globalCompositeOperation = 'source-over';
                imageSmoothingEnabled = 'true';
                imageSmoothingQuality = 'high';

                const texture = new THREE.Texture(canvas);
                texture.minFilter = THREE.LinearFilter;
                texture.magFilter = THREE.LinearFilter;

                const plane = new THREE.Mesh(
                    new THREE.PlaneGeometry(20, 20, 256, 256),
                    new THREE.MeshPhongMaterial({
                        wireframe: true,
                        color: new THREE.Color(0x1b2233),
                        displacementMap: texture,
                        displacementScale: 10, 
                    })   
                );
                plane.rotateX(-Math.PI / 2);
                scene.add(plane);

                const renderer = new THREE.WebGLRenderer();
                renderer.setSize(window.innerWidth, window.innerHeight);
                document.body.appendChild(renderer.domElement);

                new OrbitControls(camera, renderer.domElement);

                window.addEventListener('resize', onWindowResize, false);

                function onWindowResize() {
                    camera.aspect = window.innerWidth / window.innerHeight;
                    camera.updateProjectionMatrix();
                    renderer.setSize(window.innerWidth, window.innerHeight);
                    render();
                }

                let context;
                let analyser;
                let mediaSource;
                let imageData;

                function getUserMedia(dictionary, callback) {
                    try {
                        navigator.getUserMedia =
                            navigator
